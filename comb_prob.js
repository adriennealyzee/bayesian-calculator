// Generated by CoffeeScript 1.7.1
(function() {
  $(document).ready(function() {
    var BEAM_base_rect, BEAM_drag_rain, BEAM_drag_sprinkler_not_rain, BEAM_drag_sprinkler_rain, BEAM_dragger_p_rain, BEAM_dragger_p_sprinkler_not_rain, BEAM_dragger_p_sprinkler_rain, BEAM_on_drag_rain, BEAM_on_drag_sprinkler_not_rain, BEAM_on_drag_sprinkler_rain, BEAM_p_sprinkler_not_rain_value_PX, BEAM_p_sprinkler_rain_value_PX, BEAM_rect_height, BEAM_rect_p_rain, BEAM_rect_p_sprinkler_not_rain_actual, BEAM_rect_p_sprinkler_not_rain_base, BEAM_rect_p_sprinkler_rain_actual, BEAM_rect_p_sprinkler_rain_base, BEAM_rect_rain_width, BOX_base_rect, BOX_drag_rain, BOX_drag_rain_xCoord, BOX_drag_sprinkler_not_rain, BOX_drag_sprinkler_rain, BOX_dragger_p_rain, BOX_dragger_sprinkler_not_rain, BOX_dragger_sprinkler_rain, BOX_on_drag_rain, BOX_on_drag_sprinkler_not_rain, BOX_on_drag_sprinkler_rain, BOX_p_sprinkler_not_rain_value_PX, BOX_p_sprinkler_rain_value_PX, BOX_rect_p_rain, BOX_rect_p_rain_opacity, BOX_rect_sprinkler_not_rain, BOX_rect_sprinkler_rain, BOX_square_size, EVIDENCE_SILO_base_rect, EVIDENCE_SILO_calendar_update, EVIDENCE_SILO_day_box_pct_fn, EVIDENCE_SILO_day_box_value, EVIDENCE_SILO_day_dict, EVIDENCE_SILO_daybox_rect_generator, EVIDENCE_SILO_daybox_size, EVIDENCE_SILO_drag_rain, EVIDENCE_SILO_drag_rain_xCoord, EVIDENCE_SILO_dragger_p_rain, EVIDENCE_SILO_draw_boxprob_base, EVIDENCE_SILO_draw_boxprob_rectangles, EVIDENCE_SILO_draw_concreteprob_rectangles, EVIDENCE_SILO_num_days, EVIDENCE_SILO_on_drag_rain, EVIDENCE_SILO_p_rain_value, EVIDENCE_SILO_p_rain_value_PX, EVIDENCE_SILO_pixel_updater, EVIDENCE_SILO_recolor_day_box, EVIDENCE_SILO_rect_p_rain, EVIDENCE_SILO_rect_p_rain_opacity, EVIDENCE_SILO_square_size, EVIDENCE_SILO_svgContainer_boxDays, EVIDENCE_SILO_text_label_move, EVIDENCE_SILO_xCoord, EVIDENCE_SILO_x_multiplier, EVIDENCE_SILO_yCoord, LIKELIHOOD_SILO_base_rect, LIKELIHOOD_SILO_drag_sprinkler_rain, LIKELIHOOD_SILO_dragger_p_sprinkler_rain, LIKELIHOOD_SILO_draw_boxprob_base, LIKELIHOOD_SILO_draw_boxprob_rectangles, LIKELIHOOD_SILO_on_drag_sprinkler_rain, LIKELIHOOD_SILO_p_rain_value, LIKELIHOOD_SILO_p_rain_value_PX, LIKELIHOOD_SILO_p_sprinkler_rain_value, LIKELIHOOD_SILO_p_sprinkler_rain_value_PX, LIKELIHOOD_SILO_pixel_updater, LIKELIHOOD_SILO_rect_p_rain, LIKELIHOOD_SILO_rect_sprinkler_rain, LIKELIHOOD_SILO_square_size, LIKELIHOOD_SILO_xCoord, LIKELIHOOD_SILO_yCoord, PRIOR_SILO_base_rect, PRIOR_SILO_calendar_update, PRIOR_SILO_day_box_pct_fn, PRIOR_SILO_day_box_value, PRIOR_SILO_day_dict, PRIOR_SILO_daybox_rect_generator, PRIOR_SILO_daybox_size, PRIOR_SILO_drag_rain, PRIOR_SILO_drag_rain_xCoord, PRIOR_SILO_dragger_p_rain, PRIOR_SILO_draw_boxprob_base, PRIOR_SILO_draw_boxprob_rectangles, PRIOR_SILO_draw_concreteprob_rectangles, PRIOR_SILO_num_days, PRIOR_SILO_on_drag_rain, PRIOR_SILO_p_rain_value, PRIOR_SILO_p_rain_value_PX, PRIOR_SILO_pixel_updater, PRIOR_SILO_recolor_day_box, PRIOR_SILO_rect_p_rain, PRIOR_SILO_rect_p_rain_opacity, PRIOR_SILO_square_size, PRIOR_SILO_svgContainer_boxDays, PRIOR_SILO_text_label_move, PRIOR_SILO_xCoord, PRIOR_SILO_x_multiplier, PRIOR_SILO_yCoord, calendar_update, day_box_pct_fn, day_box_value, day_dict, daybox_rect_generator, daybox_size, draw_beamprob_base, draw_beamprob_rectangles, draw_boxprob_base, draw_boxprob_rectangles, draw_concreteprob_rectangles, make_rect, num_days, p_rain_value, p_rain_value_PX, p_sprinkler_not_rain_value, p_sprinkler_rain_value, pixel_updater, recolor_day_box, rect_p_sprinkler_not_rain_base_width, svgContainer_beamprob, svgContainer_box, svgContainer_boxDays, svgContainer_box_EVIDENCE_SILO, svgContainer_box_LIKELIHOOD_SILO, svgContainer_box_PRIOR_SILO, text_label_move, xCoord, x_multiplier, yCoord;
    make_rect = function(rect, d) {
      return rect.attr("x", d.x).attr("y", d.y).attr("width", d.width).attr("height", d.height).attr("fill", d.fill).attr("opacity", d.opacity).attr("id", d.id);
    };
    p_sprinkler_rain_value = 0;
    p_sprinkler_not_rain_value = 0;
    p_rain_value = 0;
    p_rain_value_PX = 0;
    rect_p_sprinkler_not_rain_base_width = 0;
    PRIOR_SILO_square_size = 300;
    PRIOR_SILO_xCoord = 0;
    PRIOR_SILO_yCoord = 0;
    PRIOR_SILO_p_rain_value = 0;
    PRIOR_SILO_p_rain_value_PX = 0;
    svgContainer_box_PRIOR_SILO = d3.select("#area_for_boxprob_PRIOR_SILO").append("svg").attr("width", "300").attr("height", "100%");
    console.log("/////");
    console.log(svgContainer_box_PRIOR_SILO);
    PRIOR_SILO_base_rect = svgContainer_box_PRIOR_SILO.append("rect");
    PRIOR_SILO_rect_p_rain = svgContainer_box_PRIOR_SILO.append("rect");
    PRIOR_SILO_dragger_p_rain = svgContainer_box_PRIOR_SILO.append("rect");
    PRIOR_SILO_draw_boxprob_base = function() {
      return make_rect(PRIOR_SILO_base_rect, {
        x: PRIOR_SILO_xCoord,
        y: PRIOR_SILO_yCoord,
        width: PRIOR_SILO_square_size,
        height: PRIOR_SILO_square_size,
        fill: "#ffa9aa",
        opacity: 0.8,
        id: "PRIOR_SILO_base_rect"
      });
    };
    PRIOR_SILO_rect_p_rain_opacity = 1;
    PRIOR_SILO_draw_boxprob_rectangles = function() {
      make_rect(PRIOR_SILO_rect_p_rain, {
        x: PRIOR_SILO_xCoord,
        y: PRIOR_SILO_yCoord,
        width: PRIOR_SILO_p_rain_value_PX,
        height: PRIOR_SILO_square_size,
        fill: "#e44547",
        opacity: 0.8,
        id: "PRIOR_SILO_rect_p_rain"
      });
      return make_rect(PRIOR_SILO_dragger_p_rain, {
        x: PRIOR_SILO_p_rain_value_PX,
        y: PRIOR_SILO_yCoord,
        width: 5,
        height: PRIOR_SILO_square_size,
        fill: "#b80b00",
        opacity: 1,
        id: "PRIOR_SILO_dragger_p_rain"
      });
    };
    PRIOR_SILO_drag_rain_xCoord = 0;
    PRIOR_SILO_on_drag_rain = function(d) {
      var yCoord;
      PRIOR_SILO_drag_rain_xCoord = d3.event.x;
      yCoord = d3.event.y;
      PRIOR_SILO_p_rain_value = (PRIOR_SILO_drag_rain_xCoord / PRIOR_SILO_square_size) * 100;
      PRIOR_SILO_p_rain_value = Math.round(PRIOR_SILO_p_rain_value);
      PRIOR_SILO_p_rain_value = Math.min(PRIOR_SILO_p_rain_value, 100);
      PRIOR_SILO_p_rain_value = Math.max(0, PRIOR_SILO_p_rain_value);
      $('#PRIOR_SILO_p_rain').val(PRIOR_SILO_p_rain_value);
      PRIOR_SILO_text_label_move();
      PRIOR_SILO_pixel_updater();
      PRIOR_SILO_draw_boxprob_rectangles();
      return PRIOR_SILO_calendar_update();
    };
    PRIOR_SILO_draw_boxprob_base();
    PRIOR_SILO_drag_rain = d3.behavior.drag().on("drag", PRIOR_SILO_on_drag_rain);
    PRIOR_SILO_dragger_p_rain.call(PRIOR_SILO_drag_rain);
    $('#PRIOR_SILO_p_rain').keyup(function() {
      PRIOR_SILO_p_rain_value = $('#PRIOR_SILO_p_rain').val();
      PRIOR_SILO_pixel_updater();
      PRIOR_SILO_calendar_update();
      return PRIOR_SILO_draw_boxprob_rectangles();
    });
    PRIOR_SILO_pixel_updater = function() {
      $('#PRIOR_SILO_p_rain_NOT').val(100 - PRIOR_SILO_p_rain_value);
      return PRIOR_SILO_p_rain_value_PX = (PRIOR_SILO_p_rain_value * PRIOR_SILO_square_size) / 100;
    };
    PRIOR_SILO_text_label_move = function() {
      return $('#PRIOR_SILO_p_rain_div').css({
        left: Math.max(0, Math.min(PRIOR_SILO_drag_rain_xCoord - 55, 300))
      });
    };
    LIKELIHOOD_SILO_square_size = 300;
    LIKELIHOOD_SILO_xCoord = 0;
    LIKELIHOOD_SILO_yCoord = 0;
    LIKELIHOOD_SILO_p_rain_value = 80;
    LIKELIHOOD_SILO_p_rain_value_PX = (LIKELIHOOD_SILO_p_rain_value / 100) * LIKELIHOOD_SILO_square_size;
    LIKELIHOOD_SILO_p_sprinkler_rain_value = 0;
    LIKELIHOOD_SILO_p_sprinkler_rain_value_PX = 0;
    svgContainer_box_LIKELIHOOD_SILO = d3.select("#area_for_boxprob_LIKELIHOOD_SILO").append("svg").attr("width", "300").attr("height", "100%");
    LIKELIHOOD_SILO_base_rect = svgContainer_box_LIKELIHOOD_SILO.append("rect");
    LIKELIHOOD_SILO_rect_p_rain = svgContainer_box_LIKELIHOOD_SILO.append("rect");
    LIKELIHOOD_SILO_rect_sprinkler_rain = svgContainer_box_LIKELIHOOD_SILO.append("rect");
    LIKELIHOOD_SILO_dragger_p_sprinkler_rain = svgContainer_box_LIKELIHOOD_SILO.append("rect");
    LIKELIHOOD_SILO_draw_boxprob_base = function() {
      return make_rect(LIKELIHOOD_SILO_base_rect, {
        x: LIKELIHOOD_SILO_xCoord,
        y: LIKELIHOOD_SILO_yCoord,
        width: LIKELIHOOD_SILO_square_size,
        height: LIKELIHOOD_SILO_square_size,
        fill: "#ffa9aa",
        opacity: 0.8,
        id: "LIKELIHOOD_SILO_base_rect"
      });
    };
    LIKELIHOOD_SILO_draw_boxprob_rectangles = function() {
      make_rect(LIKELIHOOD_SILO_rect_p_rain, {
        x: LIKELIHOOD_SILO_xCoord,
        y: LIKELIHOOD_SILO_yCoord,
        width: LIKELIHOOD_SILO_p_rain_value_PX,
        height: LIKELIHOOD_SILO_square_size,
        fill: "#e44547",
        opacity: 0.8,
        id: "LIKELIHOOD_SILO_rect_p_rain"
      });
      make_rect(LIKELIHOOD_SILO_rect_sprinkler_rain, {
        x: LIKELIHOOD_SILO_yCoord,
        y: LIKELIHOOD_SILO_yCoord,
        width: LIKELIHOOD_SILO_p_sprinkler_rain_value_PX,
        height: (LIKELIHOOD_SILO_p_sprinkler_rain_value * LIKELIHOOD_SILO_square_size) / 100,
        fill: "#f0974b",
        opacity: 1,
        id: "LIKELIHOOD_SILO_rect_sprinkler_rain"
      });
      return make_rect(LIKELIHOOD_SILO_dragger_p_sprinkler_rain, {
        x: LIKELIHOOD_SILO_xCoord,
        y: (LIKELIHOOD_SILO_p_sprinkler_rain_value * LIKELIHOOD_SILO_square_size) / 100,
        width: LIKELIHOOD_SILO_p_sprinkler_rain_value_PX,
        height: 5,
        fill: "#D13B00",
        opacity: 0.8,
        id: "LIKELIHOOD_SILO_dragger_p_sprinkler_rain"
      });
    };
    LIKELIHOOD_SILO_draw_boxprob_base();
    LIKELIHOOD_SILO_draw_boxprob_rectangles();
    LIKELIHOOD_SILO_on_drag_sprinkler_rain = function(d) {
      LIKELIHOOD_SILO_xCoord = d3.event.x;
      LIKELIHOOD_SILO_yCoord = d3.event.y;
      LIKELIHOOD_SILO_p_sprinkler_rain_value_PX = LIKELIHOOD_SILO_yCoord;
      LIKELIHOOD_SILO_p_sprinkler_rain_value = (LIKELIHOOD_SILO_p_sprinkler_rain_value_PX * 100) / LIKELIHOOD_SILO_square_size;
      LIKELIHOOD_SILO_p_sprinkler_rain_value = Math.round(LIKELIHOOD_SILO_p_sprinkler_rain_value);
      LIKELIHOOD_SILO_p_sprinkler_rain_value = Math.max(0, Math.min(LIKELIHOOD_SILO_p_sprinkler_rain_value, 100));
      $('#LIKELIHOOD_SILO_p_sprinkler_rain').val(LIKELIHOOD_SILO_p_sprinkler_rain_value);
      LIKELIHOOD_SILO_pixel_updater();
      return LIKELIHOOD_SILO_draw_boxprob_rectangles();
    };
    LIKELIHOOD_SILO_drag_sprinkler_rain = d3.behavior.drag().on("drag", LIKELIHOOD_SILO_on_drag_sprinkler_rain);
    LIKELIHOOD_SILO_dragger_p_sprinkler_rain.call(LIKELIHOOD_SILO_drag_sprinkler_rain);
    LIKELIHOOD_SILO_pixel_updater = function() {
      return LIKELIHOOD_SILO_p_sprinkler_rain_value_PX = (LIKELIHOOD_SILO_p_sprinkler_rain_value * LIKELIHOOD_SILO_p_rain_value_PX) / 100;
    };
    BOX_square_size = 300;
    xCoord = 0;
    yCoord = 0;
    svgContainer_box = d3.select("#area_for_boxprob").append("svg").attr("width", "300").attr("height", "100%");
    BOX_base_rect = svgContainer_box.append("rect");
    BOX_rect_p_rain = svgContainer_box.append("rect");
    BOX_rect_sprinkler_rain = svgContainer_box.append("rect");
    BOX_rect_sprinkler_not_rain = svgContainer_box.append("rect");
    BOX_p_sprinkler_rain_value_PX = 0;
    BOX_p_sprinkler_not_rain_value_PX = 0;
    BOX_dragger_p_rain = svgContainer_box.append("rect");
    BOX_dragger_sprinkler_rain = svgContainer_box.append("rect");
    BOX_dragger_sprinkler_not_rain = svgContainer_box.append("rect");
    draw_boxprob_base = function() {
      return make_rect(BOX_base_rect, {
        x: xCoord,
        y: yCoord,
        width: BOX_square_size,
        height: BOX_square_size,
        fill: "#ffa9aa",
        opacity: 0.8,
        id: "BOX_base_rect"
      });
    };
    BOX_rect_p_rain_opacity = 1;
    draw_boxprob_rectangles = function() {
      var BOX_p_sprinkler_not_rain_value_PX_box;
      make_rect(BOX_rect_p_rain, {
        x: xCoord,
        y: yCoord,
        width: p_rain_value_PX,
        height: BOX_square_size,
        fill: "#e44547",
        opacity: 0.8,
        id: "BOX_rect_p_rain"
      });
      make_rect(BOX_rect_sprinkler_rain, {
        x: yCoord,
        y: yCoord,
        width: p_rain_value_PX,
        height: (p_sprinkler_rain_value * BOX_square_size) / 100,
        fill: "#f0974b",
        opacity: 1,
        id: "BOX_rect_sprinkler_rain"
      });
      BOX_p_sprinkler_not_rain_value_PX_box = (p_sprinkler_not_rain_value / 100) * BOX_square_size;
      make_rect(BOX_rect_sprinkler_not_rain, {
        x: p_rain_value_PX,
        y: yCoord,
        width: BOX_square_size - p_rain_value_PX,
        height: BOX_p_sprinkler_not_rain_value_PX_box,
        fill: "#f7d13e",
        opacity: 1,
        id: "BOX_rect_sprinkler_not_rain"
      });
      make_rect(BOX_dragger_p_rain, {
        x: p_rain_value_PX,
        y: yCoord,
        width: 5,
        height: BOX_square_size,
        fill: "#b80b00",
        opacity: 1,
        id: "BOX_dragger_p_rain"
      });
      make_rect(BOX_dragger_sprinkler_rain, {
        x: xCoord,
        y: (p_sprinkler_rain_value * BOX_square_size) / 100,
        width: p_rain_value_PX,
        height: 5,
        fill: "#D13B00",
        opacity: 0.8,
        id: "BOX_dragger_sprinkler_rain"
      });
      return make_rect(BOX_dragger_sprinkler_not_rain, {
        x: p_rain_value_PX,
        y: (p_sprinkler_not_rain_value * BOX_square_size) / 100,
        width: BOX_square_size - p_rain_value_PX,
        height: 5,
        fill: "#c8a82e",
        opacity: 0.8,
        id: "BOX_dragger_sprinkler_not_rain"
      });
    };
    draw_boxprob_base();
    BOX_drag_rain_xCoord = 0;
    BOX_on_drag_rain = function(d) {
      var y;
      BOX_drag_rain_xCoord = d3.event.x;
      y = d3.event.y;
      console.log("BOX_drag_rain_xCoord", BOX_drag_rain_xCoord);
      p_rain_value = (BOX_drag_rain_xCoord / BOX_square_size) * 100;
      p_rain_value = Math.round(p_rain_value);
      p_rain_value = Math.min(p_rain_value, 100);
      p_rain_value = Math.max(0, p_rain_value);
      $('#p_rain').val(p_rain_value);
      text_label_move();
      pixel_updater();
      draw_boxprob_rectangles();
      draw_beamprob_rectangles();
      calendar_update();
      return BOX_rect_p_rain.attr("opacity", (BOX_rect_p_rain_opacity * p_rain_value) / 100);
    };
    BOX_on_drag_sprinkler_rain = function(d) {
      var x, y;
      x = d3.event.x;
      y = d3.event.y;
      BOX_p_sprinkler_rain_value_PX = y;
      p_sprinkler_rain_value = (BOX_p_sprinkler_rain_value_PX * 100) / BOX_square_size;
      p_sprinkler_rain_value = Math.round(p_sprinkler_rain_value);
      p_sprinkler_rain_value = Math.max(0, Math.min(p_sprinkler_rain_value, 100));
      $('#p_sprinkler_rain').val(p_sprinkler_rain_value);
      pixel_updater();
      draw_boxprob_rectangles();
      return draw_beamprob_rectangles();
    };
    BOX_on_drag_sprinkler_not_rain = function(d) {
      var x, y;
      x = d3.event.x;
      y = d3.event.y;
      BOX_p_sprinkler_not_rain_value_PX = y;
      p_sprinkler_not_rain_value = (BOX_p_sprinkler_not_rain_value_PX * 100) / BOX_square_size;
      p_sprinkler_not_rain_value = Math.round(p_sprinkler_not_rain_value);
      p_sprinkler_not_rain_value = Math.max(0, Math.min(p_sprinkler_not_rain_value, 100));
      $('#p_sprinkler_not_rain').val(p_sprinkler_not_rain_value);
      pixel_updater();
      draw_boxprob_rectangles();
      return draw_beamprob_rectangles();
    };
    BOX_drag_rain = d3.behavior.drag().on("drag", BOX_on_drag_rain);
    '.origin(-> \n	t = d3.select(this)\n	x: t.attr("x")\n	y: t.attr("y"))';
    BOX_drag_sprinkler_rain = d3.behavior.drag().on("drag", BOX_on_drag_sprinkler_rain);
    BOX_drag_sprinkler_not_rain = d3.behavior.drag().on("drag", BOX_on_drag_sprinkler_not_rain);
    BOX_dragger_p_rain.call(BOX_drag_rain);
    BOX_dragger_sprinkler_rain.call(BOX_drag_sprinkler_rain);
    BOX_dragger_sprinkler_not_rain.call(BOX_drag_sprinkler_not_rain);
    svgContainer_beamprob = d3.select("#area2").append("svg");
    BEAM_base_rect = svgContainer_beamprob.append("rect");
    BEAM_rect_p_rain = svgContainer_beamprob.append("rect");
    BEAM_rect_p_sprinkler_rain_base = svgContainer_beamprob.append("rect");
    BEAM_rect_p_sprinkler_rain_actual = svgContainer_beamprob.append("rect");
    BEAM_rect_p_sprinkler_not_rain_base = svgContainer_beamprob.append("rect");
    BEAM_rect_p_sprinkler_not_rain_actual = svgContainer_beamprob.append("rect");
    BEAM_p_sprinkler_rain_value_PX = 0;
    BEAM_p_sprinkler_not_rain_value_PX = 0;
    BEAM_dragger_p_rain = svgContainer_beamprob.append("rect");
    BEAM_dragger_p_sprinkler_rain = svgContainer_beamprob.append("rect");
    BEAM_dragger_p_sprinkler_not_rain = svgContainer_beamprob.append("rect");
    BEAM_rect_rain_width = 300;
    BEAM_rect_height = 50;
    draw_beamprob_base = function() {
      return make_rect(BEAM_base_rect, {
        x: 0,
        y: 0,
        width: BEAM_rect_rain_width,
        height: BEAM_rect_height,
        fill: "#ffa9aa",
        opacity: 0.8,
        id: "BEAM_base_rect"
      });
    };
    draw_beamprob_rectangles = function() {
      make_rect(BEAM_rect_p_rain, {
        x: 0,
        y: 0,
        width: p_rain_value_PX,
        height: BEAM_rect_height,
        fill: "#e44547",
        opacity: 1,
        id: "BEAM_rect_p_rain"
      });
      make_rect(BEAM_rect_p_sprinkler_rain_base, {
        x: 0,
        y: BEAM_rect_height + 5,
        width: p_rain_value_PX,
        height: BEAM_rect_height,
        fill: "#e44547",
        opacity: 0.8,
        id: "BEAM_rect_p_sprinkler_rain_base"
      });
      make_rect(BEAM_rect_p_sprinkler_rain_actual, {
        x: 0,
        y: BEAM_rect_height + 5,
        width: (p_sprinkler_rain_value * p_rain_value_PX) / 100,
        height: BEAM_rect_height,
        fill: "#f0974b",
        opacity: 0.8,
        id: "BEAM_rect_p_sprinkler_rain_actual"
      });
      rect_p_sprinkler_not_rain_base_width = BEAM_rect_rain_width - p_rain_value_PX;
      make_rect(BEAM_rect_p_sprinkler_not_rain_base, {
        x: p_rain_value_PX,
        y: BEAM_rect_height + 5,
        width: rect_p_sprinkler_not_rain_base_width,
        height: BEAM_rect_height,
        fill: "#ffa9aa",
        opacity: 0.8,
        id: "BEAM_rect_p_sprinkler_not_rain_base"
      });
      make_rect(BEAM_rect_p_sprinkler_not_rain_actual, {
        x: p_rain_value_PX,
        y: BEAM_rect_height + 5,
        width: BEAM_p_sprinkler_not_rain_value_PX,
        height: BEAM_rect_height,
        fill: "#f7d13e",
        opacity: 0.8,
        id: "BEAM_rect_p_sprinkler_not_rain_actual"
      });
      make_rect(BEAM_dragger_p_rain, {
        x: p_rain_value_PX,
        y: 0,
        width: 5,
        height: BEAM_rect_height,
        fill: "#b80b00",
        opacity: 0.8,
        id: "BEAM_dragger_p_rain"
      });
      make_rect(BEAM_dragger_p_sprinkler_rain, {
        x: (p_sprinkler_rain_value * p_rain_value_PX) / 100,
        y: BEAM_rect_height + 5,
        width: 5,
        height: BEAM_rect_height,
        fill: "#D13B00",
        opacity: 0.8,
        id: "BEAM_dragger_p_sprinkler_rain"
      });
      return make_rect(BEAM_dragger_p_sprinkler_not_rain, {
        x: p_rain_value_PX + BOX_p_sprinkler_not_rain_value_PX,
        y: BEAM_rect_height + 5,
        width: 5,
        height: BEAM_rect_height,
        fill: "#c8a82e",
        opacity: 0.8,
        id: "BEAM_dragger_p_sprinkler_not_rain"
      });
    };
    draw_beamprob_base();
    BEAM_on_drag_rain = function(d) {
      var x, y;
      x = d3.event.x;
      y = d3.event.y;
      p_rain_value = (x / BOX_square_size) * 100;
      p_rain_value = Math.round(p_rain_value);
      p_rain_value = Math.max(0, Math.min(p_rain_value, 100));
      $('#p_rain').val(p_rain_value);
      pixel_updater();
      draw_boxprob_rectangles();
      draw_beamprob_rectangles();
      return calendar_update();
    };
    BEAM_on_drag_sprinkler_rain = function(d) {
      var x, y;
      x = d3.event.x;
      y = d3.event.y;
      p_sprinkler_rain_value = (x / p_rain_value_PX) * 100;
      p_sprinkler_rain_value = Math.round(p_sprinkler_rain_value);
      p_sprinkler_rain_value = Math.max(0, Math.min(0, p_sprinkler_rain_value));
      $('#p_sprinkler_rain').val(p_sprinkler_rain_value);
      pixel_updater();
      draw_boxprob_rectangles();
      return draw_beamprob_rectangles();
    };
    BEAM_on_drag_sprinkler_not_rain = function(d) {
      var x, y;
      x = d3.event.x;
      y = d3.event.y;
      BEAM_p_sprinkler_not_rain_value_PX = x - p_rain_value_PX;
      p_sprinkler_not_rain_value = (BEAM_p_sprinkler_not_rain_value_PX / (BOX_square_size - p_rain_value_PX)) * 100;
      p_sprinkler_not_rain_value = Math.round(p_sprinkler_not_rain_value);
      p_sprinkler_not_rain_value = Math.max(0, Math.min(p_sprinkler_not_rain_value, 100));
      $('#p_sprinkler_not_rain').val(p_sprinkler_not_rain_value);
      pixel_updater();
      draw_boxprob_rectangles();
      draw_beamprob_rectangles();
      console.log("BEAM_p_sprinkler_not_rain_value_PX", BEAM_p_sprinkler_not_rain_value_PX);
      return console.log("p_sprinkler_not_rain_value", p_sprinkler_not_rain_value);
    };
    BEAM_drag_rain = d3.behavior.drag().on("drag", BEAM_on_drag_rain);
    BEAM_drag_sprinkler_rain = d3.behavior.drag().on("drag", BEAM_on_drag_sprinkler_rain);
    BEAM_drag_sprinkler_not_rain = d3.behavior.drag().on("drag", BEAM_on_drag_sprinkler_not_rain);
    BEAM_dragger_p_rain.call(BEAM_drag_rain);
    BEAM_dragger_p_sprinkler_rain.call(BEAM_drag_sprinkler_rain);
    BEAM_dragger_p_sprinkler_not_rain.call(BEAM_drag_sprinkler_not_rain);
    pixel_updater = function() {
      var p_sprinkler_rain_value_PX;
      $('#p_rain_NOT').val(100 - p_rain_value);
      p_rain_value_PX = (p_rain_value * BEAM_rect_rain_width) / 100;
      BOX_p_sprinkler_rain_value_PX = (p_sprinkler_rain_value * p_rain_value_PX) / 100;
      BOX_p_sprinkler_not_rain_value_PX = (p_sprinkler_not_rain_value * rect_p_sprinkler_not_rain_base_width) / 100;
      BEAM_p_sprinkler_rain_value_PX = (p_sprinkler_rain_value * p_rain_value_PX) / 100;
      BOX_p_sprinkler_rain_value_PX = (p_sprinkler_rain_value * p_rain_value_PX) / 100;
      p_sprinkler_rain_value_PX = (p_sprinkler_rain_value * p_rain_value_PX) / 100;
      BEAM_p_sprinkler_rain_value_PX = (p_sprinkler_rain_value * p_rain_value_PX) / 100;
      BOX_p_sprinkler_not_rain_value_PX = (p_sprinkler_not_rain_value * rect_p_sprinkler_not_rain_base_width) / 100;
      return BEAM_p_sprinkler_not_rain_value_PX = (p_sprinkler_not_rain_value / 100) * (((100 - p_rain_value) / 100) * BOX_square_size);
    };
    text_label_move = function() {
      return $('#p_rain_div').css({
        left: Math.max(0, Math.min(BOX_drag_rain_xCoord - 55, 300))
      });
    };
    $("#p_rain").keyup(function() {
      p_rain_value = $('#p_rain').val();
      pixel_updater();
      calendar_update();
      draw_beamprob_rectangles();
      draw_boxprob_rectangles();
      return text_label_move();
    });
    $("#p_sprinkler_rain").keyup(function() {
      p_sprinkler_rain_value = $('#p_sprinkler_rain').val();
      pixel_updater();
      draw_beamprob_rectangles();
      return draw_boxprob_rectangles();
    });
    $("#p_sprinkler_not_rain").keyup(function() {
      p_sprinkler_not_rain_value = $('#p_sprinkler_not_rain').val();
      pixel_updater();
      draw_beamprob_rectangles();
      return draw_boxprob_rectangles();
    });
    PRIOR_SILO_svgContainer_boxDays = d3.select("#PRIOR_SILO_area_boxDays").append("svg");
    PRIOR_SILO_num_days = 5;
    PRIOR_SILO_day_dict = [];
    PRIOR_SILO_daybox_size = 30;
    PRIOR_SILO_x_multiplier = 30;
    PRIOR_SILO_daybox_rect_generator = function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = PRIOR_SILO_num_days - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(PRIOR_SILO_day_dict[i] = [PRIOR_SILO_svgContainer_boxDays.append("rect"), 0]);
      }
      return _results;
    };
    PRIOR_SILO_daybox_rect_generator();
    PRIOR_SILO_draw_concreteprob_rectangles = function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = PRIOR_SILO_num_days - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        make_rect(PRIOR_SILO_day_dict[i][0], {
          x: PRIOR_SILO_x_multiplier,
          y: 30,
          width: PRIOR_SILO_daybox_size,
          height: PRIOR_SILO_daybox_size,
          fill: "#d6d6d6",
          opacity: 0.8,
          id: "PRIOR_SILO_day" + i
        });
        _results.push(PRIOR_SILO_x_multiplier = PRIOR_SILO_x_multiplier + 33);
      }
      return _results;
    };
    PRIOR_SILO_draw_concreteprob_rectangles();
    PRIOR_SILO_day_box_value = 0;
    $("#PRIOR_SILO_day0").click(function() {
      if (PRIOR_SILO_day_dict[0][1] === 0) {
        PRIOR_SILO_day_dict[0][0].attr("fill", "blue");
        PRIOR_SILO_day_dict[0][1] = 1;
      } else if (PRIOR_SILO_day_dict[0][1] === 1) {
        PRIOR_SILO_day_dict[0][0].attr("fill", "#d6d6d6");
        PRIOR_SILO_day_dict[0][1] = 0;
      }
      PRIOR_SILO_day_box_pct_fn();
      PRIOR_SILO_p_rain_value = PRIOR_SILO_day_box_value;
      $('#PRIOR_SILO_p_rain').val(PRIOR_SILO_p_rain_value);
      PRIOR_SILO_pixel_updater();
      return PRIOR_SILO_draw_boxprob_rectangles();
    });
    $("#PRIOR_SILO_day1").click(function() {
      if (PRIOR_SILO_day_dict[1][1] === 0) {
        PRIOR_SILO_day_dict[1][0].attr("fill", "blue");
        PRIOR_SILO_day_dict[1][1] = 1;
      } else if (PRIOR_SILO_day_dict[1][1] === 1) {
        PRIOR_SILO_day_dict[1][0].attr("fill", "#d6d6d6");
        PRIOR_SILO_day_dict[1][1] = 0;
      }
      PRIOR_SILO_day_box_pct_fn();
      PRIOR_SILO_p_rain_value = PRIOR_SILO_day_box_value;
      $('#PRIOR_SILO_p_rain').val(PRIOR_SILO_p_rain_value);
      PRIOR_SILO_pixel_updater();
      return PRIOR_SILO_draw_boxprob_rectangles();
    });
    $("#PRIOR_SILO_day2").click(function() {
      if (PRIOR_SILO_day_dict[2][1] === 0) {
        PRIOR_SILO_day_dict[2][0].attr("fill", "blue");
        PRIOR_SILO_day_dict[2][1] = 1;
      } else if (PRIOR_SILO_day_dict[2][1] === 1) {
        PRIOR_SILO_day_dict[2][0].attr("fill", "#d6d6d6");
        PRIOR_SILO_day_dict[2][1] = 0;
      }
      PRIOR_SILO_day_box_pct_fn();
      PRIOR_SILO_p_rain_value = PRIOR_SILO_day_box_value;
      $('#PRIOR_SILO_p_rain').val(PRIOR_SILO_p_rain_value);
      PRIOR_SILO_pixel_updater();
      return PRIOR_SILO_draw_boxprob_rectangles();
    });
    $("#PRIOR_SILO_day3").click(function() {
      if (PRIOR_SILO_day_dict[3][1] === 0) {
        PRIOR_SILO_day_dict[3][0].attr("fill", "blue");
        PRIOR_SILO_day_dict[3][1] = 1;
      } else if (PRIOR_SILO_day_dict[3][1] === 1) {
        PRIOR_SILO_day_dict[3][0].attr("fill", "#d6d6d6");
        PRIOR_SILO_day_dict[3][1] = 0;
      }
      PRIOR_SILO_day_box_pct_fn();
      PRIOR_SILO_p_rain_value = PRIOR_SILO_day_box_value;
      $('#PRIOR_SILO_p_rain').val(PRIOR_SILO_p_rain_value);
      PRIOR_SILO_pixel_updater();
      return PRIOR_SILO_draw_boxprob_rectangles();
    });
    $("#PRIOR_SILO_day4").click(function() {
      if (PRIOR_SILO_day_dict[4][1] === 0) {
        PRIOR_SILO_day_dict[4][0].attr("fill", "blue");
        PRIOR_SILO_day_dict[4][1] = 1;
      } else if (PRIOR_SILO_day_dict[4][1] === 1) {
        PRIOR_SILO_day_dict[4][0].attr("fill", "#d6d6d6");
        PRIOR_SILO_day_dict[4][1] = 0;
      }
      PRIOR_SILO_day_box_pct_fn();
      PRIOR_SILO_p_rain_value = PRIOR_SILO_day_box_value;
      $('#PRIOR_SILO_p_rain').val(PRIOR_SILO_p_rain_value);
      PRIOR_SILO_pixel_updater();
      return PRIOR_SILO_draw_boxprob_rectangles();
    });
    PRIOR_SILO_recolor_day_box = function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = PRIOR_SILO_num_days - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (PRIOR_SILO_day_dict[i][1] === 1) {
          _results.push(PRIOR_SILO_day_dict[i][0].attr("fill", "blue"));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    PRIOR_SILO_calendar_update = function() {
      var colored_stack, correct_colored_box_number, cur_end, cur_start, i, interval, intvl_tuple_arr, return_correct_colored_boxes, stack_generator, white_stack, x, _i, _j, _ref, _ref1, _results;
      colored_stack = [];
      white_stack = [];
      correct_colored_box_number = 0;
      intvl_tuple_arr = [];
      interval = 100 / PRIOR_SILO_num_days;
      cur_start = 0;
      cur_end = interval;
      stack_generator = function() {
        var i, _i, _ref, _results;
        colored_stack = [];
        white_stack = [];
        _results = [];
        for (i = _i = 0, _ref = PRIOR_SILO_day_dict.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (PRIOR_SILO_day_dict[i][1] === 1) {
            _results.push(colored_stack.push(i));
          } else if (PRIOR_SILO_day_dict[i][1] === 0) {
            _results.push(white_stack.push(i));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      for (i = _i = 0, _ref = PRIOR_SILO_num_days - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        intvl_tuple_arr.push([cur_start, cur_end, i + 1]);
        cur_start += interval;
        cur_end += interval;
      }
      return_correct_colored_boxes = function() {
        var _j, _ref1, _results;
        _results = [];
        for (i = _j = 0, _ref1 = PRIOR_SILO_num_days - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          if (PRIOR_SILO_p_rain_value > intvl_tuple_arr[i][0] && PRIOR_SILO_p_rain_value <= intvl_tuple_arr[i][1]) {
            correct_colored_box_number = intvl_tuple_arr[i][2];
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      stack_generator();
      return_correct_colored_boxes();
      _results = [];
      for (i = _j = 0, _ref1 = PRIOR_SILO_num_days - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        while (colored_stack.length !== correct_colored_box_number) {
          if (colored_stack.length < correct_colored_box_number && white_stack.length > 0) {
            x = white_stack.pop();
            PRIOR_SILO_day_dict[x][0].attr("fill", "blue");
            PRIOR_SILO_day_dict[x][1] = 1;
          } else if (colored_stack.length > correct_colored_box_number && colored_stack.length > 0) {
            x = colored_stack.pop();
            PRIOR_SILO_day_dict[x][0].attr("fill", "grey");
            PRIOR_SILO_day_dict[x][1] = 0;
          } else {
            break;
          }
        }
        _results.push(stack_generator());
      }
      return _results;
    };
    PRIOR_SILO_day_box_pct_fn = function() {
      var counter, i, _i, _ref;
      counter = 0;
      for (i = _i = 0, _ref = PRIOR_SILO_day_dict.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (PRIOR_SILO_day_dict[i][1] === 1) {
          counter += 1;
        }
      }
      return PRIOR_SILO_day_box_value = (counter / PRIOR_SILO_day_dict.length) * 100;
    };
    svgContainer_boxDays = d3.select("#area_boxDays").append("svg");
    num_days = 5;
    day_dict = [];
    daybox_size = 30;
    x_multiplier = 30;
    daybox_rect_generator = function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = num_days - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(day_dict[i] = [svgContainer_boxDays.append("rect"), 0]);
      }
      return _results;
    };
    daybox_rect_generator();
    draw_concreteprob_rectangles = function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = num_days - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        make_rect(day_dict[i][0], {
          x: x_multiplier,
          y: 30,
          width: daybox_size,
          height: daybox_size,
          fill: "#d6d6d6",
          opacity: 0.8,
          id: "day" + i
        });
        _results.push(x_multiplier = x_multiplier + 33);
      }
      return _results;
    };
    draw_concreteprob_rectangles();
    day_box_value = 0;
    'click_fn_for_days = ->\n	for i in [0..num_days-1]\n		console.log("i in num days.", i)\n		$("#day" + i).click ->\n			console.log("BREAKBREAK2222")\n			if day_dict[i][1] == 0\n				console.log("BREAKBREAK3333")\n				day_dict[i][0].attr("fill", "red")\n				day_dict[i][1] = 1\n\n			else if day_dict[i][1] == 1\n				console.log("BREAKBREAK4444")\n				day_dict[i][0].attr("fill", "#d6d6d6")\n				day_dict[i][1] = 0\n\n	# generates "day_box_value" (i.e. which days are colored in)\n	day_box_pct_fn()\n\n	# updates p_rain_value correctly\n	p_rain_value = day_box_value\n\n	# updates p_rain_value [display] correctly\n	$(\'#p_rain\').val(p_rain_value)\n\n	pixel_updater()\n	draw_boxprob_rectangles()\n	draw_beamprob_rectangles()\n\n# run it!\nclick_fn_for_days()\n';
    $("#day0").click(function() {
      if (day_dict[0][1] === 0) {
        day_dict[0][0].attr("fill", "red");
        day_dict[0][1] = 1;
      } else if (day_dict[0][1] === 1) {
        day_dict[0][0].attr("fill", "#d6d6d6");
        day_dict[0][1] = 0;
      }
      day_box_pct_fn();
      p_rain_value = day_box_value;
      $('#p_rain').val(p_rain_value);
      pixel_updater();
      draw_boxprob_rectangles();
      return draw_beamprob_rectangles();
    });
    $("#day1").click(function() {
      if (day_dict[1][1] === 0) {
        day_dict[1][0].attr("fill", "red");
        day_dict[1][1] = 1;
      } else if (day_dict[1][1] === 1) {
        day_dict[1][0].attr("fill", "#d6d6d6");
        day_dict[1][1] = 0;
      }
      day_box_pct_fn();
      p_rain_value = day_box_value;
      $('#p_rain').val(p_rain_value);
      pixel_updater();
      draw_boxprob_rectangles();
      return draw_beamprob_rectangles();
    });
    $("#day2").click(function() {
      if (day_dict[2][1] === 0) {
        day_dict[2][0].attr("fill", "red");
        day_dict[2][1] = 1;
      } else if (day_dict[2][1] === 1) {
        day_dict[2][0].attr("fill", "#d6d6d6");
        day_dict[2][1] = 0;
      }
      day_box_pct_fn();
      p_rain_value = day_box_value;
      $('#p_rain').val(p_rain_value);
      pixel_updater();
      draw_boxprob_rectangles();
      return draw_beamprob_rectangles();
    });
    $("#day3").click(function() {
      if (day_dict[3][1] === 0) {
        day_dict[3][0].attr("fill", "red");
        day_dict[3][1] = 1;
      } else if (day_dict[3][1] === 1) {
        day_dict[3][0].attr("fill", "#d6d6d6");
        day_dict[3][1] = 0;
      }
      day_box_pct_fn();
      p_rain_value = day_box_value;
      $('#p_rain').val(p_rain_value);
      pixel_updater();
      draw_boxprob_rectangles();
      return draw_beamprob_rectangles();
    });
    $("#day4").click(function() {
      if (day_dict[4][1] === 0) {
        day_dict[4][0].attr("fill", "red");
        day_dict[4][1] = 1;
      } else if (day_dict[4][1] === 1) {
        day_dict[4][0].attr("fill", "#d6d6d6");
        day_dict[4][1] = 0;
      }
      day_box_pct_fn();
      p_rain_value = day_box_value;
      $('#p_rain').val(p_rain_value);
      pixel_updater();
      draw_boxprob_rectangles();
      return draw_beamprob_rectangles();
    });
    recolor_day_box = function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = num_days - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (day_dict[i][1] === 1) {
          _results.push(day_dict[i][0].attr("fill", "blue"));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    calendar_update = function() {
      var colored_stack, correct_colored_box_number, cur_end, cur_start, i, interval, intvl_tuple_arr, return_correct_colored_boxes, stack_generator, white_stack, x, _i, _j, _ref, _ref1, _results;
      colored_stack = [];
      white_stack = [];
      correct_colored_box_number = 0;
      intvl_tuple_arr = [];
      interval = 100 / num_days;
      cur_start = 0;
      cur_end = interval;
      stack_generator = function() {
        var i, _i, _ref, _results;
        colored_stack = [];
        white_stack = [];
        _results = [];
        for (i = _i = 0, _ref = day_dict.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (day_dict[i][1] === 1) {
            _results.push(colored_stack.push(i));
          } else if (day_dict[i][1] === 0) {
            _results.push(white_stack.push(i));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      for (i = _i = 0, _ref = num_days - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        intvl_tuple_arr.push([cur_start, cur_end, i + 1]);
        cur_start += interval;
        cur_end += interval;
        console.log(intvl_tuple_arr[i]);
      }
      return_correct_colored_boxes = function() {
        if (p_rain_value > intvl_tuple_arr[0][0] && p_rain_value <= intvl_tuple_arr[0][1]) {
          console.log("if 1", intvl_tuple_arr[1][2]);
          correct_colored_box_number = intvl_tuple_arr[0][2];
          return console.log("correct_colored_box_number", correct_colored_box_number);
        } else if (p_rain_value > intvl_tuple_arr[1][0] && p_rain_value <= intvl_tuple_arr[1][1]) {
          console.log("if 2", intvl_tuple_arr[2][2]);
          correct_colored_box_number = intvl_tuple_arr[1][2];
          return console.log("correct_colored_box_number", correct_colored_box_number);
        } else if (p_rain_value > intvl_tuple_arr[2][0] && p_rain_value <= intvl_tuple_arr[2][1]) {
          console.log("if 3", intvl_tuple_arr[3][2]);
          return correct_colored_box_number = intvl_tuple_arr[2][2];
        } else if (p_rain_value > intvl_tuple_arr[3][0] && p_rain_value <= intvl_tuple_arr[3][1]) {
          console.log("if 4", intvl_tuple_arr[4][2]);
          return correct_colored_box_number = intvl_tuple_arr[3][2];
        } else if (p_rain_value > intvl_tuple_arr[4][0] && p_rain_value <= intvl_tuple_arr[4][1]) {
          return correct_colored_box_number = intvl_tuple_arr[4][2];
        }
      };
      stack_generator();
      return_correct_colored_boxes();
      _results = [];
      for (i = _j = 0, _ref1 = num_days - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        while (colored_stack.length !== correct_colored_box_number) {
          if (colored_stack.length < correct_colored_box_number && white_stack.length > 0) {
            x = white_stack.pop();
            day_dict[x][0].attr("fill", "blue");
            day_dict[x][1] = 1;
          } else if (colored_stack.length > correct_colored_box_number && colored_stack.length > 0) {
            x = colored_stack.pop();
            day_dict[x][0].attr("fill", "grey");
            day_dict[x][1] = 0;
          } else {
            break;
          }
        }
        _results.push(stack_generator());
      }
      return _results;
    };
    day_box_pct_fn = function() {
      var counter, i, _i, _ref;
      counter = 0;
      for (i = _i = 0, _ref = day_dict.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (day_dict[i][1] === 1) {
          counter += 1;
        }
      }
      return day_box_value = (counter / day_dict.length) * 100;
    };
    EVIDENCE_SILO_square_size = 300;
    EVIDENCE_SILO_xCoord = 0;
    EVIDENCE_SILO_yCoord = 0;
    EVIDENCE_SILO_p_rain_value = 0;
    EVIDENCE_SILO_p_rain_value_PX = 0;
    svgContainer_box_EVIDENCE_SILO = d3.select("#area_for_boxprob_EVIDENCE_SILO").append("svg").attr("width", "300").attr("height", "100%");
    console.log("/////");
    console.log(svgContainer_box_EVIDENCE_SILO);
    EVIDENCE_SILO_base_rect = svgContainer_box_EVIDENCE_SILO.append("rect");
    EVIDENCE_SILO_rect_p_rain = svgContainer_box_EVIDENCE_SILO.append("rect");
    EVIDENCE_SILO_dragger_p_rain = svgContainer_box_EVIDENCE_SILO.append("rect");
    EVIDENCE_SILO_draw_boxprob_base = function() {
      return make_rect(EVIDENCE_SILO_base_rect, {
        x: EVIDENCE_SILO_xCoord,
        y: EVIDENCE_SILO_yCoord,
        width: EVIDENCE_SILO_square_size,
        height: EVIDENCE_SILO_square_size,
        fill: "#ffa9aa",
        opacity: 0.8,
        id: "EVIDENCE_SILO_base_rect"
      });
    };
    EVIDENCE_SILO_rect_p_rain_opacity = 1;
    EVIDENCE_SILO_draw_boxprob_rectangles = function() {
      make_rect(EVIDENCE_SILO_rect_p_rain, {
        x: EVIDENCE_SILO_xCoord,
        y: EVIDENCE_SILO_yCoord,
        width: EVIDENCE_SILO_p_rain_value_PX,
        height: EVIDENCE_SILO_square_size,
        fill: "#e44547",
        opacity: 0.8,
        id: "EVIDENCE_SILO_rect_p_rain"
      });
      return make_rect(EVIDENCE_SILO_dragger_p_rain, {
        x: EVIDENCE_SILO_p_rain_value_PX,
        y: EVIDENCE_SILO_yCoord,
        width: 5,
        height: EVIDENCE_SILO_square_size,
        fill: "#b80b00",
        opacity: 1,
        id: "EVIDENCE_SILO_dragger_p_rain"
      });
    };
    EVIDENCE_SILO_drag_rain_xCoord = 0;
    EVIDENCE_SILO_on_drag_rain = function(d) {
      EVIDENCE_SILO_drag_rain_xCoord = d3.event.x;
      yCoord = d3.event.y;
      EVIDENCE_SILO_p_rain_value = (EVIDENCE_SILO_drag_rain_xCoord / EVIDENCE_SILO_square_size) * 100;
      EVIDENCE_SILO_p_rain_value = Math.round(EVIDENCE_SILO_p_rain_value);
      EVIDENCE_SILO_p_rain_value = Math.min(EVIDENCE_SILO_p_rain_value, 100);
      EVIDENCE_SILO_p_rain_value = Math.max(0, EVIDENCE_SILO_p_rain_value);
      $('#EVIDENCE_SILO_p_rain').val(EVIDENCE_SILO_p_rain_value);
      EVIDENCE_SILO_text_label_move();
      EVIDENCE_SILO_pixel_updater();
      EVIDENCE_SILO_draw_boxprob_rectangles();
      return EVIDENCE_SILO_calendar_update();
    };
    EVIDENCE_SILO_draw_boxprob_base();
    EVIDENCE_SILO_drag_rain = d3.behavior.drag().on("drag", EVIDENCE_SILO_on_drag_rain);
    EVIDENCE_SILO_dragger_p_rain.call(EVIDENCE_SILO_drag_rain);
    $('#EVIDENCE_SILO_p_rain').keyup(function() {
      EVIDENCE_SILO_p_rain_value = $('#EVIDENCE_SILO_p_rain').val();
      EVIDENCE_SILO_pixel_updater();
      EVIDENCE_SILO_calendar_update();
      return EVIDENCE_SILO_draw_boxprob_rectangles();
    });
    EVIDENCE_SILO_pixel_updater = function() {
      $('#EVIDENCE_SILO_p_rain_NOT').val(100 - EVIDENCE_SILO_p_rain_value);
      return EVIDENCE_SILO_p_rain_value_PX = (EVIDENCE_SILO_p_rain_value * EVIDENCE_SILO_square_size) / 100;
    };
    EVIDENCE_SILO_text_label_move = function() {
      return $('#EVIDENCE_SILO_p_rain_div').css({
        left: Math.max(0, Math.min(EVIDENCE_SILO_drag_rain_xCoord - 55, 300))
      });
    };
    EVIDENCE_SILO_svgContainer_boxDays = d3.select("#EVIDENCE_SILO_area_boxDays").append("svg");
    EVIDENCE_SILO_num_days = 6;
    EVIDENCE_SILO_day_dict = [];
    EVIDENCE_SILO_daybox_size = 30;
    EVIDENCE_SILO_x_multiplier = 30;
    EVIDENCE_SILO_daybox_rect_generator = function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = EVIDENCE_SILO_num_days - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(EVIDENCE_SILO_day_dict[i] = [EVIDENCE_SILO_svgContainer_boxDays.append("rect"), 0]);
      }
      return _results;
    };
    EVIDENCE_SILO_daybox_rect_generator();
    EVIDENCE_SILO_draw_concreteprob_rectangles = function() {
      var i, text1, text2, text3, text4, text5, text6, _i, _ref;
      for (i = _i = 0, _ref = EVIDENCE_SILO_num_days - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        make_rect(EVIDENCE_SILO_day_dict[i][0], {
          x: EVIDENCE_SILO_x_multiplier,
          y: 30,
          width: EVIDENCE_SILO_daybox_size,
          height: EVIDENCE_SILO_daybox_size,
          fill: "#d6d6d6",
          opacity: 0.5,
          id: "EVIDENCE_SILO_day" + i
        });
        EVIDENCE_SILO_x_multiplier = EVIDENCE_SILO_x_multiplier + 33;
      }
      console.log("START");
      text1 = EVIDENCE_SILO_svgContainer_boxDays.append("text").attr("x", 42).attr("y", 47).text(".").attr("fill", "black").attr("stroke", "black");
      text2 = EVIDENCE_SILO_svgContainer_boxDays.append("text").attr("x", 122).attr("y", 37).attr("fill", "black").attr("stroke", "black").append("tspan").text(".").attr("dy", 6).attr("x", 76).append("tspan").text(".").attr("dy", 6).attr("x", 76);
      text3 = EVIDENCE_SILO_svgContainer_boxDays.append("text").attr("x", 122).attr("y", 37).attr("fill", "black").attr("stroke", "black").append("tspan").text("  .").attr("dy", 6).attr("x", 106).append("tspan").text("..").attr("dy", 6).attr("x", 106);
      text4 = EVIDENCE_SILO_svgContainer_boxDays.append("text").attr("x", 122).attr("y", 37).attr("fill", "black").attr("stroke", "black").append("tspan").text("..").attr("dy", 6).attr("x", 138).append("tspan").text("..").attr("dy", 6).attr("x", 138);
      text5 = EVIDENCE_SILO_svgContainer_boxDays.append("text").attr("x", 122).attr("y", 37).attr("fill", "black").attr("stroke", "black").append("tspan").text(". .").attr("dy", 4).attr("x", 170).append("tspan").text("  .").attr("dy", 4).attr("x", 170).append("tspan").text(". .").attr("dy", 5).attr("x", 170);
      return text6 = EVIDENCE_SILO_svgContainer_boxDays.append("text").attr("x", 122).attr("y", 37).attr("fill", "black").attr("stroke", "black").append("tspan").text("...").attr("dy", 4).attr("x", 201).append("tspan").text("...").attr("dy", 5).attr("x", 201);
    };
    EVIDENCE_SILO_draw_concreteprob_rectangles();
    EVIDENCE_SILO_day_box_value = 0;
    $("#EVIDENCE_SILO_day0").click(function() {
      if (EVIDENCE_SILO_day_dict[0][1] === 0) {
        EVIDENCE_SILO_day_dict[0][0].attr("fill", "blue");
        EVIDENCE_SILO_day_dict[0][1] = 1;
      } else if (EVIDENCE_SILO_day_dict[0][1] === 1) {
        EVIDENCE_SILO_day_dict[0][0].attr("fill", "#d6d6d6");
        EVIDENCE_SILO_day_dict[0][1] = 0;
      }
      EVIDENCE_SILO_day_box_pct_fn();
      EVIDENCE_SILO_p_rain_value = Math.round(EVIDENCE_SILO_day_box_value);
      $('#EVIDENCE_SILO_p_rain').val(EVIDENCE_SILO_p_rain_value);
      EVIDENCE_SILO_pixel_updater();
      return EVIDENCE_SILO_draw_boxprob_rectangles();
    });
    $("#EVIDENCE_SILO_day1").click(function() {
      if (EVIDENCE_SILO_day_dict[1][1] === 0) {
        EVIDENCE_SILO_day_dict[1][0].attr("fill", "blue");
        EVIDENCE_SILO_day_dict[1][1] = 1;
      } else if (EVIDENCE_SILO_day_dict[1][1] === 1) {
        EVIDENCE_SILO_day_dict[1][0].attr("fill", "#d6d6d6");
        EVIDENCE_SILO_day_dict[1][1] = 0;
      }
      EVIDENCE_SILO_day_box_pct_fn();
      EVIDENCE_SILO_p_rain_value = Math.round(EVIDENCE_SILO_day_box_value);
      $('#EVIDENCE_SILO_p_rain').val(EVIDENCE_SILO_p_rain_value);
      EVIDENCE_SILO_pixel_updater();
      return EVIDENCE_SILO_draw_boxprob_rectangles();
    });
    $("#EVIDENCE_SILO_day2").click(function() {
      if (EVIDENCE_SILO_day_dict[2][1] === 0) {
        EVIDENCE_SILO_day_dict[2][0].attr("fill", "blue");
        EVIDENCE_SILO_day_dict[2][1] = 1;
      } else if (EVIDENCE_SILO_day_dict[2][1] === 1) {
        EVIDENCE_SILO_day_dict[2][0].attr("fill", "#d6d6d6");
        EVIDENCE_SILO_day_dict[2][1] = 0;
      }
      EVIDENCE_SILO_day_box_pct_fn();
      EVIDENCE_SILO_p_rain_value = Math.round(EVIDENCE_SILO_day_box_value);
      $('#EVIDENCE_SILO_p_rain').val(EVIDENCE_SILO_p_rain_value);
      EVIDENCE_SILO_pixel_updater();
      return EVIDENCE_SILO_draw_boxprob_rectangles();
    });
    $("#EVIDENCE_SILO_day3").click(function() {
      if (EVIDENCE_SILO_day_dict[3][1] === 0) {
        EVIDENCE_SILO_day_dict[3][0].attr("fill", "blue");
        EVIDENCE_SILO_day_dict[3][1] = 1;
      } else if (EVIDENCE_SILO_day_dict[3][1] === 1) {
        EVIDENCE_SILO_day_dict[3][0].attr("fill", "#d6d6d6");
        EVIDENCE_SILO_day_dict[3][1] = 0;
      }
      EVIDENCE_SILO_day_box_pct_fn();
      EVIDENCE_SILO_p_rain_value = Math.round(EVIDENCE_SILO_day_box_value);
      $('#EVIDENCE_SILO_p_rain').val(EVIDENCE_SILO_p_rain_value);
      EVIDENCE_SILO_pixel_updater();
      return EVIDENCE_SILO_draw_boxprob_rectangles();
    });
    $("#EVIDENCE_SILO_day4").click(function() {
      if (EVIDENCE_SILO_day_dict[4][1] === 0) {
        EVIDENCE_SILO_day_dict[4][0].attr("fill", "blue");
        EVIDENCE_SILO_day_dict[4][1] = 1;
      } else if (EVIDENCE_SILO_day_dict[4][1] === 1) {
        EVIDENCE_SILO_day_dict[4][0].attr("fill", "#d6d6d6");
        EVIDENCE_SILO_day_dict[4][1] = 0;
      }
      EVIDENCE_SILO_day_box_pct_fn();
      EVIDENCE_SILO_p_rain_value = Math.round(EVIDENCE_SILO_day_box_value);
      $('#EVIDENCE_SILO_p_rain').val(EVIDENCE_SILO_p_rain_value);
      EVIDENCE_SILO_pixel_updater();
      return EVIDENCE_SILO_draw_boxprob_rectangles();
    });
    $("#EVIDENCE_SILO_day5").click(function() {
      if (EVIDENCE_SILO_day_dict[5][1] === 0) {
        EVIDENCE_SILO_day_dict[5][0].attr("fill", "blue");
        EVIDENCE_SILO_day_dict[5][1] = 1;
      } else if (EVIDENCE_SILO_day_dict[5][1] === 1) {
        EVIDENCE_SILO_day_dict[5][0].attr("fill", "#d6d6d6");
        EVIDENCE_SILO_day_dict[5][1] = 0;
      }
      EVIDENCE_SILO_day_box_pct_fn();
      EVIDENCE_SILO_p_rain_value = Math.round(EVIDENCE_SILO_day_box_value);
      $('#EVIDENCE_SILO_p_rain').val(EVIDENCE_SILO_p_rain_value);
      EVIDENCE_SILO_pixel_updater();
      return EVIDENCE_SILO_draw_boxprob_rectangles();
    });
    EVIDENCE_SILO_recolor_day_box = function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = EVIDENCE_SILO_num_days - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (EVIDENCE_SILO_day_dict[i][1] === 1) {
          _results.push(EVIDENCE_SILO_day_dict[i][0].attr("fill", "blue"));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    EVIDENCE_SILO_calendar_update = function() {
      var colored_stack, correct_colored_box_number, cur_end, cur_start, i, interval, intvl_tuple_arr, return_correct_colored_boxes, stack_generator, white_stack, x, _i, _j, _ref, _ref1, _results;
      colored_stack = [];
      white_stack = [];
      correct_colored_box_number = 0;
      intvl_tuple_arr = [];
      interval = 100 / EVIDENCE_SILO_num_days;
      cur_start = 0;
      cur_end = interval;
      stack_generator = function() {
        var i, _i, _ref, _results;
        colored_stack = [];
        white_stack = [];
        _results = [];
        for (i = _i = 0, _ref = EVIDENCE_SILO_day_dict.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (EVIDENCE_SILO_day_dict[i][1] === 1) {
            _results.push(colored_stack.push(i));
          } else if (EVIDENCE_SILO_day_dict[i][1] === 0) {
            _results.push(white_stack.push(i));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      for (i = _i = 0, _ref = EVIDENCE_SILO_num_days - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        intvl_tuple_arr.push([cur_start, cur_end, i + 1]);
        cur_start += interval;
        cur_end += interval;
      }
      return_correct_colored_boxes = function() {
        var _j, _ref1, _results;
        _results = [];
        for (i = _j = 0, _ref1 = EVIDENCE_SILO_num_days - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          if (EVIDENCE_SILO_p_rain_value > intvl_tuple_arr[i][0] && EVIDENCE_SILO_p_rain_value <= intvl_tuple_arr[i][1]) {
            correct_colored_box_number = intvl_tuple_arr[i][2];
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      stack_generator();
      return_correct_colored_boxes();
      _results = [];
      for (i = _j = 0, _ref1 = EVIDENCE_SILO_num_days - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        while (colored_stack.length !== correct_colored_box_number) {
          if (colored_stack.length < correct_colored_box_number && white_stack.length > 0) {
            x = white_stack.pop();
            EVIDENCE_SILO_day_dict[x][0].attr("fill", "blue");
            EVIDENCE_SILO_day_dict[x][1] = 1;
          } else if (colored_stack.length > correct_colored_box_number && colored_stack.length > 0) {
            x = colored_stack.pop();
            EVIDENCE_SILO_day_dict[x][0].attr("fill", "grey");
            EVIDENCE_SILO_day_dict[x][1] = 0;
          } else {
            break;
          }
        }
        _results.push(stack_generator());
      }
      return _results;
    };
    return EVIDENCE_SILO_day_box_pct_fn = function() {
      var counter, i, _i, _ref;
      counter = 0;
      for (i = _i = 0, _ref = EVIDENCE_SILO_day_dict.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (EVIDENCE_SILO_day_dict[i][1] === 1) {
          counter += 1;
        }
      }
      return EVIDENCE_SILO_day_box_value = (counter / EVIDENCE_SILO_day_dict.length) * 100;
    };
  });

}).call(this);
